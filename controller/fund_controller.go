package controller

import (
	"fmt"
	"os"

	"go_echarts/common"
	"go_echarts/fund"

	"github.com/gin-gonic/gin"

	"github.com/go-echarts/go-echarts/v2/charts"
	"github.com/go-echarts/go-echarts/v2/opts"
)

// GetFundInfo 获取所有基金名称和代码
func GetFundInfo(c *gin.Context) {
	r, err := fund.SelectFundCodeName()
	if err != nil {
		fmt.Println(err)
		return
	}
	c.JSON(200, r)
}


// GetFundInfoByCodeName 根据指定基金代码和名称获取基金基本信息
func GetFundInfoByCodeName(c *gin.Context) {
	f := &struct {
		Code string `json:"code"`
		Name string `json:"name"`
	}{}
	c.ShouldBind(f)
	fmt.Printf("f:%v\n",f)
	r, err := fund.SelectFundInfoByCodeName(f.Code,f.Name)
	if err != nil {
		fmt.Println(err)
		return
	}
	c.JSON(200, r)
}

// GetDayFundInfo 获取每天新增fund净值信息
func GetDayFundInfo(c *gin.Context) {
	// 创建excel,写入表头信息
	f := fund.CreateExcel("fund.xls")
	fund.WriteExcelHeader(f)
	items, pages, err := fund.CountPage(common.MastURL)
	if err != nil {
		fmt.Printf("countpage is error, err:%v\n", err)
		return
	}
	for i := 1; i <= pages; i++ {
		pageURL := fmt.Sprintf("http://fund.eastmoney.com/data/rankhandler.aspx?op=ph&dt=kf&ft=all&rs=&gs=0&sc=jc&st=asc&sd=2021-04-04&ed=2022-04-04&qdii=&tabSubtype=,,,,,&pi=%d&pn=50&dx=1&v=0.6160846806292868", i) //nolint:lll
		_ = fund.StoreFundData(pageURL, f, items, i)
	}
	fund.CloseFile(f)
	r, err := fund.SelectFundCodeName()
	if err != nil {
		fmt.Println(err)
		return
	}
	c.JSON(200, r)
}

func GetFundValue(c *gin.Context) {
	f := &struct {
		Code string `json:"code"`
		Name string `json:"name"`
	}{}
	c.ShouldBind(f)
	fmt.Printf("f:%v\n",f)
	//fund.SelectValue(f.Code)
	list, err := fund.GetFundValueFromMySQL(f.Code)
	if err != nil {
		fmt.Printf("get fund value is error, err: %v\n", err)
		return
	}
	fmt.Printf("list: %v\n", list)

	dates := make([]string, 0)
	values := make([]float64, 0)

	for _, l := range list {
		dates = append(dates, l.Date)
		values = append(values, l.Value)
	}
	// 画出净值折线图
	CreateFundLine(dates, values)
	// 响应数据
	c.JSON(200, list)
}

// CreateFundLine 使用go-echarts画出净值折线图,保存成html文件
func CreateFundLine(dates []string, values []float64) {
	// create a new bar instance
	line := charts.NewLine()
	// set some global options like Title/Legend/ToolTip or anything else
	line.SetGlobalOptions(charts.WithTitleOpts(opts.Title{
		Title:    "My first fund chart generated by go-echarts",
		Subtitle: "fund value daily",
	}))
	items := make([]opts.LineData, 0)
	for _, value := range values {
		items = append(items, opts.LineData{Value: value})
	}
	// Put data into instance
	line.SetXAxis(dates).
		AddSeries("Category A", items)
	// Where the magic happens
	fileName := "./static/line.html"
	f, _ := os.Create(fileName)
	fmt.Println(f.Name())
	line.Render(f)
}
